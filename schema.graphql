directive @key(fields: String!) on OBJECT | INTERFACE
directive @extends on OBJECT | INTERFACE
directive @external on OBJECT | FIELD_DEFINITION
directive @requires(fields: String!) on FIELD_DEFINITION
directive @provides(fields: String!) on FIELD_DEFINITION
scalar _Any
scalar Any
scalar Time

schema {
  query: Query
  mutation: Mutation
}

type _Service {
  sdl: String
}

union _Entity = Member

type Member @key(fields: "id") {
  id: ID!
  email: String!

  # optional information fetched from member provider
  given_name: String
  family_name: String
  middle_name: String

  memberships: [Membership!]!
}

type Membership {
  id: ID!
  # id of related entity (eg. workspace, team, project etc.)
  entityID: ID!
  # type of related entity (eg. "Workspace", "Team", "Project" etc.)
  # optional, serves also for filtering purposes
  entity: String
  # custom role for given membership (eg. admin, guest, developer etc.)
  # optional, serves also for filtering purposes
  # this value can be any given string
  role: String

  member: Member!
}

type Query {
  member(id: ID!): Member
  members(q: String): [Member!]!
  membership(id: ID!): Membership
  memberships(
    memberID: ID
    entityID: ID
    entity: String
    role: String
  ): [Membership!]!

  # federation
  _service: _Service!
  _entities(representations: [_Any!]!): [_Entity]!
}

input MembershipInvitationInput {
  email: String!
  entityID: ID!
  entity: String
  role: String
}

input MembershipInput {
  memberID: ID!
  entityID: ID!
  entity: String
  role: String
}

type Mutation {
  inviteMember(input: MembershipInvitationInput): Membership!
  # create membership for specific member
  createMembership(input: MembershipInput!): Membership!
  # delete membership with given ID
  deleteMembership(id: ID!): Membership!
}
